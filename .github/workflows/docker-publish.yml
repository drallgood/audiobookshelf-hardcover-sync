name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Matches semantic version tags (e.g., v1.0.0)
  pull_request:
    branches: [main]
  workflow_dispatch:
    # Allows manual trigger from GitHub UI

# Set permissions for the workflow
permissions:
  contents: read
  packages: write
  # Required for GitHub Container Registry
  id-token: write  # For OIDC auth with GitHub Actions

# Environment variables for the workflow
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1  # Enable Docker BuildKit

jobs:
  # Lint and test the code before building the image
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for version calculation

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests
        run: |
          make test

      - name: Test version injection build
        run: |
          cd cmd/audiobookshelf-hardcover-sync
          go build -ldflags="-X main.version=test-build-$(git rev-parse --short HEAD)" -o /tmp/test-main .

      - name: Verify version injection
        run: |
          VERSION=$(/tmp/test-main --version)
          echo "Built version: $VERSION"
          if [[ "$VERSION" == *"test-build-"* ]]; then
            echo "‚úÖ Version injection working correctly"
          else
            echo "‚ùå Version injection failed"
            echo "Expected output to contain 'test-build-', but got: $VERSION"
            exit 1
          fi

  build-and-push:
    name: Build and Push
    needs: test
    if: github.event_name != 'pull_request'  # Skip for PRs, handled by test job
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    permissions:
      contents: read
      packages: write
      id-token: write  # For OIDC auth with GitHub Actions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for version calculation

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: network=host
          install: true
          version: v0.11.0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=sha,prefix=sha-
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.env.outputs.version || 'dev' }}
            org.opencontainers.image.created=${{ steps.env.outputs.date || '' }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT



      - name: Set up environment
        id: env
        run: |
          # Ensure jq is installed
          if ! command -v jq &> /dev/null; then
            echo "::error::jq is required but not installed. Please add it to your workflow."
            exit 1
          fi
          
          # Set default values
          VERSION="dev"
          IS_RELEASE="false"
          
          # Get the current date in ISO 8601 format
          DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          
          # Determine version from tag or use commit SHA
          if [[ "${{ github.ref_name }}" == v* ]]; then
            # For tags, use the tag name without the 'v' prefix
            VERSION="${GITHUB_REF_NAME#v}"
            IS_RELEASE="true"
          else
            # For branches, use the short SHA
            VERSION="${{ github.sha }}"
            IS_RELEASE="false"
          fi
          
          # Output each value
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "Version: $VERSION"
          echo "Is Release: $IS_RELEASE"
          echo "Date: $DATE"

      - name: Set up Docker Buildx cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.env.outputs.version || 'dev' }}
            BUILD_DATE=${{ steps.env.outputs.date || '' }}
            VCS_REF=${{ github.sha }}
            VCS_URL=${{ github.server_url }}/${{ github.repository }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.env.outputs.version || 'dev' }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,enable=${{ startsWith(github.ref, 'refs/tags/v') }},value=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            type=raw,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }},value=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:beta
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false  # Disable provenance for now as it requires Docker Buildx v0.11+
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Get image digest
        id: image_digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA::8} | cut -d'@' -f2)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

  # This job will only run for tags starting with 'v' (e.g., v1.0.0)
  create-release:
    name: Create Release
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Get tag name
        id: get-tag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "release_name=Release ${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get-tag.outputs.tag_name }}
          name: ${{ steps.get-tag.outputs.release_name }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Get release info
        id: release_info
        run: |
          RELEASE_URL=$(curl -sH "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get-tag.outputs.tag_name }}" | \
            jq -r '.html_url')
          echo "release_url=${RELEASE_URL}" >> $GITHUB_OUTPUT

      - name: Prepare release body
        id: prepare_release_body
        run: |
          # Get the image digest from the build step
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA::8} | cut -d'@' -f2)
          
          # Create release body using a heredoc with proper escaping
          cat << 'EOF' > body.md
          ### üê≥ Docker Image
          
          Pull the Docker image:
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get-tag.outputs.tag_name }}
          ```
          
          Or use the `latest` tag for the most recent release:
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```
          
          ### üîç Image Details
          - **Digest:** `%DIGEST%`
          - **Source:** [View on GitHub](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF
          
          # Replace placeholder with actual digest
          sed -i "s|%DIGEST%|${DIGEST}|g" body.md
          
          # Output the body for the next step
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          cat body.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get-tag.outputs.tag_name }}
          name: Release ${{ steps.get-tag.outputs.tag_name }}
          body: |
            ### üê≥ Docker Image
            
            Pull the Docker image:
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get-tag.outputs.tag_name }}
            ```
            
            Or use the `latest` tag for the most recent release:
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ```
            
            ### üîç Image Details
            - **Source:** [View on GitHub](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          draft: false
          prerelease: false
          generate_release_notes: true
