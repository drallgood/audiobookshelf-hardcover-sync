name: Publish Helm Chart

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'helm/**'
      - '.github/workflows/helm-publish.yml'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'helm/**'
      - '.github/workflows/helm-publish.yml'
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  publish-helm-chart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine Channel
        id: channel
        run: |
          CHANNEL=stable
          if [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            CHANNEL=dev
          fi
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            CHANNEL=stable
          fi
          echo "channel=${CHANNEL}" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Add Helm repos
        run: |
          helm repo add stable https://charts.helm.sh/stable
          helm repo update

      - name: Extract Version from Git Tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # Extract version from tag (e.g., v1.2.3 -> 1.2.3)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "chart_version=$VERSION" >> $GITHUB_OUTPUT
            echo "app_version=$VERSION" >> $GITHUB_OUTPUT
            echo "🏷️ Release tag detected: v$VERSION"
          else
            # Use default versions for non-tag builds
            CHART_VERSION=$(grep '^version:' helm/audiobookshelf-hardcover-sync/Chart.yaml | cut -d' ' -f2)
            APP_VERSION=$(grep '^appVersion:' helm/audiobookshelf-hardcover-sync/Chart.yaml | cut -d'"' -f2)
            echo "chart_version=$CHART_VERSION" >> $GITHUB_OUTPUT
            echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
            echo "📦 Using existing chart version: $CHART_VERSION, app version: $APP_VERSION"
          fi

      - name: Update Chart Version (for releases)
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "🔄 Updating Chart.yaml with release version: ${{ steps.version.outputs.chart_version }}"
          sed -i "s/^version:.*/version: ${{ steps.version.outputs.chart_version }}/" helm/audiobookshelf-hardcover-sync/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${{ steps.version.outputs.app_version }}\"/" helm/audiobookshelf-hardcover-sync/Chart.yaml
          
          echo "📋 Updated Chart.yaml:"
          grep -E '^(version|appVersion):' helm/audiobookshelf-hardcover-sync/Chart.yaml

      - name: Lint Helm Chart
        run: |
          helm lint helm/audiobookshelf-hardcover-sync

      - name: Package Helm Chart
        run: |
          mkdir -p .cr-release-packages
          helm package helm/audiobookshelf-hardcover-sync --destination .cr-release-packages

      - name: Create Chart Repository Index (per channel)
        if: github.event_name != 'pull_request'
        run: |
          CHANNEL=${{ steps.channel.outputs.channel }}
          TARGET_DIR="gh-pages/${CHANNEL}"
          REPO_URL="https://drallgood.github.io/audiobookshelf-hardcover-sync/${CHANNEL}"
          mkdir -p "${TARGET_DIR}"

          # Copy packaged charts into channel directory
          cp .cr-release-packages/*.tgz "${TARGET_DIR}/"

          # Create or update channel-specific index.yaml
          if [ -f "${TARGET_DIR}/index.yaml" ]; then
            helm repo index "${TARGET_DIR}" --merge "${TARGET_DIR}/index.yaml" --url "${REPO_URL}"
          else
            helm repo index "${TARGET_DIR}" --url "${REPO_URL}"
          fi

          # Additionally mirror stable to root for backward compatibility
          if [ "$CHANNEL" = "stable" ]; then
            ROOT_DIR="gh-pages"
            ROOT_URL="https://drallgood.github.io/audiobookshelf-hardcover-sync"
            mkdir -p "${ROOT_DIR}"
            # Copy packaged charts to root as well
            cp .cr-release-packages/*.tgz "${ROOT_DIR}/"
            # Merge or create root index.yaml
            if [ -f "${ROOT_DIR}/index.yaml" ]; then
              helm repo index "${ROOT_DIR}" --merge "${ROOT_DIR}/index.yaml" --url "${ROOT_URL}"
            else
              helm repo index "${ROOT_DIR}" --url "${ROOT_URL}"
            fi
          fi

      - name: Create README for Chart Repository
        if: github.event_name != 'pull_request'
        run: |
          cat > gh-pages/README.md << 'EOF'
          # Audiobookshelf-Hardcover Sync Helm Chart Repository
          
          This repository hosts the official Helm chart for [Audiobookshelf-Hardcover Sync](https://github.com/drallgood/audiobookshelf-hardcover-sync).
          
          ## Usage
          
          Add one of these Helm repositories:
          
          ```bash
          # Stable releases (from main)
          helm repo add audiobookshelf-hardcover-sync https://drallgood.github.io/audiobookshelf-hardcover-sync/stable
          # Legacy (backward compatible): root mirrors stable
          # helm repo add audiobookshelf-hardcover-sync https://drallgood.github.io/audiobookshelf-hardcover-sync
          
          # Dev channel (from develop)
          helm repo add audiobookshelf-hardcover-sync-dev https://drallgood.github.io/audiobookshelf-hardcover-sync/dev
          helm repo update
          ```
          
          Install the chart (stable):
          
          ```bash
          helm install my-sync audiobookshelf-hardcover-sync/audiobookshelf-hardcover-sync -f my-values.yaml
          ```

          Install the chart (dev):

          ```bash
          helm install my-sync-dev audiobookshelf-hardcover-sync-dev/audiobookshelf-hardcover-sync -f my-values.yaml
          ```
          
          ## Configuration
          
          For detailed configuration options, see the [chart documentation](https://github.com/drallgood/audiobookshelf-hardcover-sync/tree/main/helm/audiobookshelf-hardcover-sync).
          
          ## Charts
          
          | Chart | Version | App Version | Description |
          |-------|---------|-------------|-------------|
          | audiobookshelf-hardcover-sync | Latest | Latest | Sync your reading progress between Audiobookshelf and Hardcover |
          
          ## Support
          
          For issues and support, please visit the [main repository](https://github.com/drallgood/audiobookshelf-hardcover-sync/issues).
          EOF

      - name: Setup Pages
        if: github.event_name != 'pull_request'
        uses: actions/configure-pages@v5

      - name: Upload artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './gh-pages'

      - name: Deploy to GitHub Pages
        if: github.event_name != 'pull_request'
        id: deployment
        uses: actions/deploy-pages@v4

  test-chart-install:
    runs-on: ubuntu-latest
    needs: publish-helm-chart
    if: github.event_name == 'push'
    steps:
      - name: Determine Channel
        id: channel
        run: |
          CHANNEL=stable
          if [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            CHANNEL=dev
          fi
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            CHANNEL=stable
          fi
          echo "channel=${CHANNEL}" >> $GITHUB_OUTPUT

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Test Chart Installation
        run: |
          # Wait a bit for GitHub Pages to be available
          sleep 30
          
          # Add the repository for the correct channel
          CHANNEL="${{ steps.channel.outputs.channel }}"
          if [ "$CHANNEL" = "dev" ]; then
            REPO_URL="https://drallgood.github.io/audiobookshelf-hardcover-sync/dev"
            REPO_NAME="audiobookshelf-hardcover-sync-dev"
          else
            REPO_URL="https://drallgood.github.io/audiobookshelf-hardcover-sync/stable"
            REPO_NAME="audiobookshelf-hardcover-sync"
          fi

          helm repo add "$REPO_NAME" "$REPO_URL"
          helm repo update
          
          # Search for the chart
          helm search repo "$REPO_NAME"
          
          # Test template rendering
          helm template test "$REPO_NAME/audiobookshelf-hardcover-sync" \
            --set secrets.audiobookshelf.url="https://test.example.com" \
            --set secrets.audiobookshelf.token="test-token" \
            --set secrets.hardcover.token="test-token" \
            > /tmp/test-output.yaml
          
          echo "✅ Chart installation test passed!"
